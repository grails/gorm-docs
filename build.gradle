buildscript {
    repositories {
        maven {
            url "https://repo.grails.org/grails/core"
        }
    }

    dependencies {
        classpath("org.asciidoctor:asciidoctor-gradle-jvm:4.0.0-alpha.1")
    }
}

ext {
    groovyVersion = "3.0.13"
    githubBranch = "8.0.x"
    checkOutDir = "build/checkout"
    explicitGormSrc = System.getProperty("gorm.src") ?: (project.hasProperty('gorm.src') ? project.getProperty("gorm.src") : null)
    gormSrc = explicitGormSrc ? file(explicitGormSrc).absolutePath : "$checkOutDir/gorm-src"
    zipFile = "build/source.zip"

    coreProjects = [
            'core',
            'web',
            'gorm',
            'gorm-async',
            'gorm-test',
            'gorm-support',
            'gorm-validation'
    ]

    implementationProjects = [
            rx: coreProjects + ['gorm-rx']
    ]
}

version project.projectVersion

repositories {
    mavenCentral()
    maven {
        url "https://repo.grails.org/grails/core"
    }
}

task fetchSource {
    outputs.dir layout.buildDirectory.dir('checkout')
    inputs.properties(branch: githubBranch)

    onlyIf {
        println "GORM SRC=$explicitGormSrc"
        return !explicitGormSrc
    }

    doLast {
        println "Downloading GORM source code."
        def tag = System.getenv('TAGGED_VERSION')
        if (tag) {
            ant.get src: "https://github.com/grails/grails-data-mapping/archive/${tag}.zip", dest: zipFile, verbose: true
        } else {
            ant.get src: "https://github.com/grails/grails-data-mapping/zipball/${githubBranch}", dest: zipFile, verbose: true
        }

        ant.unzip src: zipFile, dest: checkOutDir, {
            mapper type: "regexp", from: "(grails-\\S*?/)(.*)", to: "gorm-src/\\2"
        }
        println "GORM source code downloaded."
    }

}

allprojects { project ->

    version project.gormVersion
    ext['gormVersion'] = project.projectVersion

    apply plugin: 'org.asciidoctor.jvm.convert'

    repositories {
        maven {
            url "https://repo.grails.org/grails/core"
        }
    }

    configurations {
        documentation {
            attributes {
                attribute(Bundling.BUNDLING_ATTRIBUTE, (Bundling) objects.named(Bundling, 'external'))
            }
        }
    }

    def apiDocProjects = implementationProjects.get(project.name)
    dependencies {
        documentation "org.codehaus.groovy:groovy:$groovyVersion"
        documentation "org.codehaus.groovy:groovy-ant:$groovyVersion"
        documentation 'org.fusesource.jansi:jansi:1.12'
        documentation ("com.github.javaparser:javaparser-core:3.15.14")
        if (apiDocProjects) {
            for (p in apiDocProjects) {
                documentation "org.grails:grails-datastore-$p:$gormVersion"
            }
        }
    }

    asciidoctor {
        // resources {
        //     from("${project.projectDir}/src/docs/images")
        //     into "${project.projectDir}/images"
        // }

        attributes 'experimental': 'true',
                // 'compat-mode'   : 'true',
                'icons': 'font',
                'version': project.version,
                'imagesdir': 'images',
                'sourcedir': "${project.projectDir}/src/main/groovy"
    }

    task copyDocs(type: Copy, dependsOn: asciidoctor) {
        from "${project.buildDir}/asciidoc/html5"
        into "${project.rootProject.buildDir}/docs/${project.name}/manual"
    }

    if (apiDocProjects) {
        task groovydoc(type: Groovydoc, dependsOn: fetchSource) {
            docTitle = "GORM for ${project.name[0].toUpperCase()}${project.name.substring(1)} $gormVersion"
            destinationDir = project.rootProject.file("build/docs/${project.name}/api")

            def files
            for (p in apiDocProjects) {
                if (files == null) {
                    files = project.rootProject.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
                } else {
                    files += project.rootProject.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
                }
            }
            source = files
            classpath = configurations.documentation
        }
    }

    tasks.withType(org.gradle.api.tasks.javadoc.Groovydoc) {
        configure {
            access = GroovydocAccess.PRIVATE
            processScripts = false
            includeMainForScripts = false
            includeAuthor = true
            groovyClasspath = configurations.documentation
        }
    }
}

task copyAllDocs(dependsOn: subprojects*.tasks*.copyDocs)

task copyResources(type: Copy) {
    from 'src/docs/resources'
    into "${project.buildDir}/docs"
}

task docs(dependsOn: [copyAllDocs, copyResources] +
        subprojects.findAll { project -> project.tasks.findByName('groovydoc') }
                .collect { project -> project.tasks.groovydoc }
)

task assembleDocsDist(type: Zip) {
    dependsOn docs
    from "${project.buildDir}/docs"
    include '*'
    include '*/**'
    archiveFileName = "${project.name}-${project.version}.zip"
    destinationDirectory = project.layout.buildDirectory.dir('distributions')
}

docs.finalizedBy assembleDocsDist
