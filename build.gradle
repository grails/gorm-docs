buildscript {
    repositories {
		maven {
			url "https://repo.grails.org/grails/core"
		}
        jcenter()
    }

    dependencies {
    	classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.0'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

import org.groovy.lang.groovydoc.tasks.GroovydocTask

ext {
	githubBranch = "master"
	checkOutDir = "build/checkout"
	zipFile = "build/source.zip"

	coreProjects = [
		'core',
		'simple',
		'web',
		'gorm',
		'gorm-plugin-support'
	]

	implementationProjects = [
		mongodb: coreProjects + ['gorm-mongodb'],
		hibernate: coreProjects + ['gorm-hibernate-core', 'gorm-hibernate5'],
		neo4j: coreProjects + ['gorm-neo4j']
		cassandra: coreProjects + ['gorm-cassandra'],
		redis: coreProjects + ['gorm-redis']
	]
}

version project.gormVersion

repositories {
	maven {
		url "https://repo.grails.org/grails/core"
	}
}
configurations {
	groovy
	documentation
}

dependencies {
	documentation "org.codehaus.groovy:groovy-all:2.4.6"
	documentation 'org.fusesource.jansi:jansi:1.12'
	for(p in coreProjects) {
		documentation "org.grails:grails-datastore-$p:$gormVersion"	
	}
	
}

task fetchSource << {
	ant.mkdir dir: project.buildDir
    ant.mkdir dir: checkOutDir

    println "Downloading GORM source code."
    def tag = System.getenv('TRAVIS_TAG')
    if(tag) {
        ant.get src: "https://github.com/grails/grails-data-mapping/archive/${tag}.zip", dest: zipFile, verbose: true
    }
    else {
        ant.get src: "http://github.com/grails/grails-data-mapping/zipball/${githubBranch}", dest: zipFile, verbose: true
    }
    
    ant.unzip src: zipFile, dest: checkOutDir, {
        mapper type: "regexp", from: "(grails-\\S*?/)(.*)", to: "gorm-src/\\2"
    }

    println "GORM source code downloaded."
}

fetchSource.inputs.properties(branch:githubBranch)
fetchSource.outputs.dir checkOutDir

task groovydoc(type:GroovydocTask, dependsOn:fetchSource) {
	docTitle = "GORM $gormVersion"
	destinationDir = project.file("build/docs/api")
	notimestamp = true
	noversionstamp = true
	def files 
	for(p in coreProjects) {
		if(files == null) {
			files = project.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
		}
		else {
			files += project.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")	
		}
	}
	source = files
	classpath = configurations.documentation
	jvmArgs "-Xmx1024m"
}

subprojects { project ->
	apply plugin: 'org.asciidoctor.convert'

	repositories {
		maven {
			url "https://repo.grails.org/grails/core"
		}
	}

	configurations {
		groovy
		documentation
	}

	def apiDocProjects = implementationProjects.get(project.name)
	dependencies {
		documentation "org.codehaus.groovy:groovy-all:2.4.6"
		documentation 'org.fusesource.jansi:jansi:1.12'
		if(apiDocProjects) {
			for(p in apiDocProjects) {
				documentation "org.grails:grails-datastore-$p:$gormVersion"	
			}			
		}		
	}	

	asciidoctor {
	    resources {
	        from("${project.projectDir}/src/docs/images")
	        into "${project.projectDir}/images"
	    }

	    attributes 'experimental'  : 'true',
	               'compat-mode'   : 'true',
	               'toc'           : 'left',
	               'icons'         : 'font',
	               'version'       : project.version,
	               'sourcedir'     : "${project.projectDir}/src/main/groovy"
	}	

	task copyDocs(type:Copy, dependsOn:asciidoctor) {
		from "${project.buildDir}/asciidoc/html5"
		into "${project.rootProject.buildDir}/docs/${project.name}/manual"
	}

	if(apiDocProjects) {
		task groovydoc(type:GroovydocTask, dependsOn:fetchSource) {
			docTitle = "GORM for ${project.name[0].toUpperCase()}${project.name.substring(1)} $gormVersion"
			destinationDir = project.rootProject.file("build/docs/${project.name}/api")
			notimestamp = true
			noversionstamp = true

			def files 
			for(p in apiDocProjects) {
				if(files == null) {
					files = project.rootProject.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
				}
				else {
					files += project.rootProject.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")	
				}
			}
			source = files
			classpath = configurations.documentation
			jvmArgs "-Xmx1024m"
		}		
	}
}

task clean(type:Delete) {
	delete project.buildDir
}
task copyDocs(dependsOn:subprojects*.tasks*.copyDocs)
task copyResources(type:Copy) {
	from 'src/docs/resources'
	into "${project.buildDir}/docs"
}
task docs(dependsOn:[groovydoc, copyDocs, copyResources] +
	subprojects.findAll { project -> project.tasks.findByName('groovydoc')}
			   .collect { project -> project.tasks.groovydoc }
)

task assemble(type: Zip, dependsOn:docs) {
	from "${project.buildDir}/docs"
	baseName = "${project.name}-${project.version}"
	destinationDir = project.file("${project.buildDir}/distributions")
}